package com.kh.SkocketEx;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

//대화 시작하는 대화 주체자
public class ServerEx {
	public static void main(String[] args) {
		//대화 주체자는 나의 집 주소와 우리집에 어떻게 들어올지 들어오는 경로(포트번호)생성
		//서버 측의 포트 번호를 지정해서 ServerSocket 생성
		
		
		try {
			
			ServerSocket s = new ServerSocket(12349);
			
			//System.out.println("주최자 측 번호가 열렸습니다.");
			System.out.println("party chat opeen");
			// 우리집에 방문하는 손님의 연결을 수락
			
			Socket b = s.accept();
			System.out.println("client success"); //집 문 열어줌을 확인
			
			//주최자와 대화를 하기 위한 입출력 스트림 생성
			//1. 참가자.getInputStream() : 참가자가 작성한 데이터를 읽어오기 위한 입력 스트림을 가져옴(숫자값으로 대화를 가져옴)
			//2. InputStreamReader : 하나씩된 단어들을 숫자에서 문자로 변환하는데 사용
			//3. BufferedReader : 하나씩 된 데이터를 한 번에 가져오고 읽을 수 있또록 도와줌
			BufferedReader in = new BufferedReader(new InputStreamReader(c.getInputStream()));
		
			//작성한 내용을 눈으로 볼 수 있게 내보내는 역할을 하고, 눈으로 읽을 수 있게 도와줌
			//1. 참가자.getInputStream(), true : 참가자가 작성한 내용을 내보내기위해 가져옴
			//							true를 사용함으로써 내보내도Ok 라는 의미
			//2. PrintWriter () : 텍스트를 출력하는데 불편함 없이 매끄럽게 출력할 수 있도록 해줌
			// 					flush() : 강제로 출력하는 역할 <- true 포함되어 있음
			PrintWriter out = new PrintWriter(c.getOutputStream(), true);
			
			
			
			// 참가자로부터 받은 메세지 수신 및 출력
			String m ; //= in.readLine();
			
			while((m = in.readLine()) != null) {
				System.out.println("send success : " + m);
					
			}
			
			
			
			
			
			b.close();
			s.close();
			
			
			
		} catch (IOException e) {
			
			
			e.printStackTrace();
		
		}
	}
}
